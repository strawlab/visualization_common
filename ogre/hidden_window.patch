diff -r 9f793a9666d0 -r 16e1fee32915 OgreMain/include/OgreRenderWindow.h
--- OgreMain/include/OgreRenderWindow.h	Sat Jul 31 14:47:18 2010 +0100
+++ OgreMain/include/OgreRenderWindow.h	Sat Jul 31 20:38:24 2010 +0200
@@ -130,6 +130,15 @@
         virtual void setVisible(bool visible)
         { (void)visible; }
 
+		/** Indicates whether the window was set to hidden (not displayed)
+		*/
+		virtual bool isHidden(void) const { return false; }
+
+		/** Hide (or show) the window.
+		*/
+		virtual void setHidden(bool hidden)
+		{ (void)hidden; }
+
         /** Overridden from RenderTarget, flags invisible windows as inactive
         */
         virtual bool isActive(void) const { return mActive && isVisible(); }
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/Direct3D11/include/OgreD3D11RenderWindow.h
--- RenderSystems/Direct3D11/include/OgreD3D11RenderWindow.h	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/Direct3D11/include/OgreD3D11RenderWindow.h	Sat Jul 31 20:38:24 2010 +0200
@@ -51,6 +51,8 @@
 		void destroy(void);
 		bool isVisible() const;
 		bool isClosed() const { return mClosed; }
+		bool isHidden() const { return mHidden; }
+		void setHidden(bool hidden);
 		void reposition(int left, int top);
 		void resize(unsigned int width, unsigned int height);
 		void swapBuffers( bool waitForVSync = true );
@@ -93,6 +95,7 @@
 		bool	mIsExternal;			// window not created by Ogre
 		bool	mSizing;
 		bool	mClosed;
+		bool	mHidden;
 		bool	mIsSwapChain;			// Is this a secondary window?
 		bool	mSwitchingFullscreen;	// Are we switching from fullscreen to windowed or vice versa
 
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/Direct3D11/src/OgreD3D11RenderWindow.cpp
--- RenderSystems/Direct3D11/src/OgreD3D11RenderWindow.cpp	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/Direct3D11/src/OgreD3D11RenderWindow.cpp	Sat Jul 31 20:38:24 2010 +0200
@@ -48,6 +48,7 @@
 		mActive = false;
 		mSizing = false;
 		mClosed = false;
+		mHidden = false;
 		mSwitchingFullscreen = false;
 		mDisplayFrequency = 0;
 		mRenderTargetView = 0;
@@ -135,6 +136,10 @@
 			opt = miscParams->find("vsyncInterval");
 			if(opt != miscParams->end())
 				mVSyncInterval = StringConverter::parseUnsignedInt(opt->second);
+			// hidden	[parseBool]
+			opt = miscParams->find("hidden");
+			if(opt != miscParams->end())
+				mHidden = StringConverter::parseBool(opt->second);
 			// displayFrequency
 			opt = miscParams->find("displayFrequency");
 			if(opt != miscParams->end())
@@ -281,6 +286,7 @@
 
 		mActive = true;
 		mClosed = false;
+		setHidden(mHidden);
 	}
 	//---------------------------------------------------------------------
 	void D3D11RenderWindow::setFullscreen(bool fullScreen, unsigned int width, unsigned int height)
@@ -666,6 +672,18 @@
 		return (mHWnd && !IsIconic(mHWnd));
 	}
 	//---------------------------------------------------------------------
+	void D3D11RenderWindow::setHidden(bool hidden)
+	{
+		mHidden = hidden;
+		if (!mIsExternal)
+		{
+			if (hidden)
+				ShowWindow(mHWnd, SW_HIDE);
+			else
+				ShowWindow(mHWnd, SW_SHOWNORMAL);
+		}
+	}
+	//---------------------------------------------------------------------
 	void D3D11RenderWindow::reposition(int top, int left)
 	{
 		if (mHWnd && !mIsFullScreen)
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/Direct3D9/include/OgreD3D9RenderWindow.h
--- RenderSystems/Direct3D9/include/OgreD3D9RenderWindow.h	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/Direct3D9/include/OgreD3D9RenderWindow.h	Sat Jul 31 20:38:24 2010 +0200
@@ -55,6 +55,8 @@
 		bool				isVisible			() const;
 		bool 				isClosed			() const { return mClosed; }
 		bool				isVSync				() const { return mVSync; }
+		bool				isHidden			() const { return mHidden; }
+		void				setHidden			(bool hidden);
 		void 				reposition			(int left, int top);
 		void 				resize				(unsigned int width, unsigned int height);
 		void 				swapBuffers			( bool waitForVSync = true );
@@ -114,6 +116,7 @@
 		HWND						mHWnd;					// Win32 Window handle		
 		bool						mIsExternal;			// window not created by Ogre
 		bool						mClosed;				// Is this window destroyed.		
+		bool						mHidden;
 		bool						mSwitchingFullscreen;	// Are we switching from fullscreen to windowed or vice versa		
 		D3DMULTISAMPLE_TYPE			mFSAAType;				// AA type.
 		DWORD						mFSAAQuality;			// AA quality.
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/Direct3D9/src/OgreD3D9RenderWindow.cpp
--- RenderSystems/Direct3D9/src/OgreD3D9RenderWindow.cpp	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/Direct3D9/src/OgreD3D9RenderWindow.cpp	Sat Jul 31 20:38:24 2010 +0200
@@ -50,6 +50,7 @@
 		mHWnd = 0;
 		mActive = false;		
 		mClosed = false;
+		mHidden = false;
 		mSwitchingFullscreen = false;
 		mDisplayFrequency = 0;
 		mDeviceValid = false;
@@ -113,6 +114,10 @@
 			opt = miscParams->find("vsync");
 			if(opt != miscParams->end())
 				mVSync = StringConverter::parseBool(opt->second);
+			// hidden	[parseBool]
+			opt = miscParams->find("hidden");
+			if(opt != miscParams->end())
+				mHidden = StringConverter::parseBool(opt->second);
 			// vsyncInterval	[parseUnsignedInt]
 			opt = miscParams->find("vsyncInterval");
 			if(opt != miscParams->end())
@@ -351,6 +356,7 @@
 									
 		mActive = true;
 		mClosed = false;
+		setHidden(mHidden);
 	}
 
 	void D3D9RenderWindow::setFullscreen(bool fullScreen, unsigned int width, unsigned int height)
@@ -679,6 +685,18 @@
 		return (mHWnd && !IsIconic(mHWnd));
 	}
 
+	void D3D9RenderWindow::setHidden(bool hidden)
+	{
+		mHidden = hidden;
+		if (!mIsExternal)
+		{
+			if (hidden)
+				ShowWindow(mHWnd, SW_HIDE);
+			else
+				ShowWindow(mHWnd, SW_SHOWNORMAL);
+		}
+	}
+
 	void D3D9RenderWindow::reposition(int top, int left)
 	{
 		if (mHWnd && !mIsFullScreen)
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/GL/include/GLX/OgreGLXWindow.h
--- RenderSystems/GL/include/GLX/OgreGLXWindow.h	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/GL/include/GLX/OgreGLXWindow.h	Sat Jul 31 20:38:24 2010 +0200
@@ -59,6 +59,12 @@
 		
 		/** @copydoc see RenderWindow::setVisible */
 		void setVisible(bool visible);
+
+		/** @copydoc see RenderWindow::isHidden */
+		bool isHidden(void) const { return mHidden; }
+
+		/** @copydoc see RenderWindow::setHidden */
+		void setHidden(bool hidden);
 		
 		/** @copydoc see RenderWindow::reposition */
 		void reposition(int left, int top);
@@ -91,6 +97,7 @@
 	private:
 		bool mClosed;
 		bool mVisible;
+		bool mHidden;
 		bool mIsTopLevel;
 		bool mIsExternal;
 		bool mIsExternalGLControl;
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/GL/include/OgreWin32Window.h
--- RenderSystems/GL/include/OgreWin32Window.h	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/GL/include/OgreWin32Window.h	Sat Jul 31 20:38:24 2010 +0200
@@ -39,12 +39,14 @@
         Win32Window(Win32GLSupport &glsupport);
         ~Win32Window();
 
-       void create(const String& name, unsigned int width, unsigned int height,
-	            bool fullScreen, const NameValuePairList *miscParams);
-	   void setFullscreen(bool fullScreen, unsigned int width, unsigned int height);
+		void create(const String& name, unsigned int width, unsigned int height,
+			bool fullScreen, const NameValuePairList *miscParams);
+		void setFullscreen(bool fullScreen, unsigned int width, unsigned int height);
         void destroy(void);
 		bool isActive(void) const;
         bool isVisible() const;
+		bool isHidden() const { return mHidden; }
+		void setHidden(bool hidden);
         bool isClosed(void) const;
         void reposition(int left, int top);
         void resize(unsigned int width, unsigned int height);
@@ -81,6 +83,7 @@
 		bool	mIsExternalGLContext;
         bool    mSizing;
 		bool	mClosed;
+		bool	mHidden;
         int     mDisplayFrequency;      // fullscreen only, to restore display
         Win32Context *mContext;
     };
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/GL/src/GLX/OgreGLXWindow.cpp
--- RenderSystems/GL/src/GLX/OgreGLXWindow.cpp	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/GL/src/GLX/OgreGLXWindow.cpp	Sat Jul 31 20:38:24 2010 +0200
@@ -73,6 +73,7 @@
 		mIsExternalGLControl = false;
 		mClosed = false;
 		mActive = false;
+		mHidden = false;
 	}
 	
 	//-------------------------------------------------------------------------------------------------//
@@ -110,6 +111,7 @@
 		uint samples = 0;
 		short frequency = 0;
 		bool vsync = false;
+		bool hidden = false;
 		unsigned int vsyncInterval = 1;
 		int gamma = 0;
 		::GLXContext glxContext = 0;
@@ -155,6 +157,9 @@
 			if((opt = miscParams->find("vsync")) != end) 
 				vsync = StringConverter::parseBool(opt->second);
 
+			if((opt = miscParams->find("hidden")) != end)
+				hidden = StringConverter::parseBool(opt->second);
+
 			if((opt = miscParams->find("vsyncInterval")) != end) 
 				vsyncInterval = StringConverter::parseUnsignedInt(opt->second);
 
@@ -398,10 +403,14 @@
 			
 			XMapWindow(xDisplay, mWindow);
 			
-			if (mIsFullScreen)
+			if (mIsFullScreen && !hidden)
 			{
 				switchFullScreen (true);
 			}
+			else if (hidden)
+			{
+				setHidden(true);
+			}
 			XFlush(xDisplay);
 			
 			WindowEventUtilities::_addRenderWindow(this);
@@ -514,6 +523,29 @@
 	}
 	
 	//-------------------------------------------------------------------------------------------------//
+	void GLXWindow::setHidden(bool hidden)
+	{
+		mHidden = hidden;
+		// ignore for external windows as these should handle
+		// this externally
+		if (mIsExternal)
+			return;
+
+		if (hidden)
+		{
+			XUnmapWindow(mGLSupport->getXDisplay(), mWindow);
+		}
+		else
+		{
+			XMapWindow(mGLSupport->getXDisplay(), mWindow);
+			if (mIsFullScreen)
+			{
+				switchFullScreen(true);
+			}
+		}
+	}
+
+	//-------------------------------------------------------------------------------------------------//
 	void GLXWindow::reposition(int left, int top)
 	{
 		if (mClosed || ! mIsTopLevel)
diff -r 9f793a9666d0 -r 16e1fee32915 RenderSystems/GL/src/OgreWin32Window.cpp
--- RenderSystems/GL/src/OgreWin32Window.cpp	Sat Jul 31 14:47:18 2010 +0100
+++ RenderSystems/GL/src/OgreWin32Window.cpp	Sat Jul 31 20:38:24 2010 +0200
@@ -58,6 +58,7 @@
 		mIsExternalGLContext = false;
 		mSizing = false;
 		mClosed = false;
+		mHidden = false;
 		mDisplayFrequency = 0;
 		mActive = false;
 		mDeviceName = NULL;
@@ -97,6 +98,7 @@
 		HWND parent = 0;
 		String title = name;
 		bool vsync = false;
+		bool hidden = false;
 		unsigned int vsyncInterval = 1;
 		String border;
 		bool outerSize = false;
@@ -128,6 +130,9 @@
 			if ((opt = miscParams->find("vsync")) != end)
 				vsync = StringConverter::parseBool(opt->second);
 
+			if ((opt = miscParams->find("hidden")) != end)
+				hidden = StringConverter::parseBool(opt->second);
+
 			if ((opt = miscParams->find("vsyncInterval")) != end)
 				vsyncInterval = StringConverter::parseUnsignedInt(opt->second);
 
@@ -447,6 +452,7 @@
 		mContext = new Win32Context(mHDC, mGlrc);
 
 		mActive = true;
+		setHidden(hidden);
 	}
 
 	void Win32Window::adjustWindow(unsigned int clientWidth, unsigned int clientHeight, 
@@ -652,6 +658,18 @@
 		return mClosed;
 	}
 
+	void Win32Window::setHidden(bool hidden)
+	{
+		mHidden = hidden;
+		if (!mIsExternal)
+		{
+			if (hidden)
+				ShowWindow(mHWnd, SW_HIDE);
+			else
+				ShowWindow(mHWnd, SW_SHOWNORMAL);
+		}
+	}
+
 	void Win32Window::reposition(int left, int top)
 	{
 		if (mHWnd && !mIsFullScreen)
